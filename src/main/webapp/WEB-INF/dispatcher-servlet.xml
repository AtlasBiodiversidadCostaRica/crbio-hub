<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
       xmlns:beans="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
           http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
           http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-2.0.xsd">

    <!-- Scans the classpath of this application for @Components to deploy as beans -->
    <context:component-scan base-package="org.ala.hubs"/>

    <!-- Configures the @Controller programming model -->
    <mvc:annotation-driven conversion-service="conversionService" />

    <!-- Custom conversionService -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="org.ala.hubs.util.CustomStringToArrayConverter" />
            </set>
        </property>
    </bean>

    <!-- Where to load static resources (css, js, images) -->
    <mvc:resources mapping="/static/**" location="/" />

    <!-- Over-ride bean properties - including dataSource configs -->
    <context:property-override location="classpath:hubs.properties" ignore-unresolvable="true" ignore-resource-not-found="true"/>

    <!-- Also make hubs properties available for lookup (via Spring EL) -->
    <context:property-placeholder location="classpath:hubs.properties" />

    <!--
    <mvc:resources mapping="/robots.txt" location="/robots.txt" />
    <mvc:resources mapping="/sitemap*" location="/" />
    -->

    <!-- File uploads need this bean defined -->
    <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="10000000"/>
    </bean>

    <!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="10">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- Application Message Bundle -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames" value="/WEB-INF/messages,http://biocache.ala.org.au/ws/facets/i18n"/>
        <property name="cacheSeconds" value="300"/><!-- loads changes without restarting container -->
        <property name="useCodeAsDefaultMessage" value="true"/>
    </bean>

    <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
        <property name="paramName" value="lang" />
    </bean>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="${i18n.code}"/><!-- value from hubs.properties -->
    </bean>

    <bean id="handlerMapping" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="interceptors">
            <ref bean="localeChangeInterceptor" />
        </property>
    </bean>

    <!-- This will override the default DefaultAnnotationHandlerMapping that is created,
      -  and not map file extensions automagically -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" p:order="2">
        <property name="useDefaultSuffixPattern" value="false"/>
    </bean>

    <!--
      - This bean resolves specific types of exceptions to corresponding logical
      - view names for error views. The default behaviour of DispatcherServlet
      - is to propagate all exceptions to the servlet container: this will happen
      - here with all other types of exceptions.
     -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="error"/>
        <property name="defaultStatusCode" value="500"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.web.servlet.PageNotFound">error/pageNotFound</prop>
                <prop key="org.springframework.web.servlet.mvc.multiaction.NoSuchRequestHandlingMethodException">error/pageNotFound</prop>
                <prop key="org.springframework.dao.DataAccessException">error/dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">error/dataAccessFailure</prop>
            </props>
        </property>
        <property name="defaultErrorView" value="error/general" />
    </bean>

    <!-- Content negotiation view resolver - uses either accept header mime type of the request
     -   or the file extention for the request URL -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" p:order="1">
        <property name="mediaTypes">
            <map>
                <entry key="html" value="text/html" />
                <entry key="xml"  value="application/xml"/>
                <entry key="json" value="application/json"/>
            </map>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <property name="marshaller">
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                            <property name="autodetectAnnotations" value="true" />
                        </bean>
                    </property>
                </bean>
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
                    <property name="objectMapper" ref="jacksonObjectMapper" />
                </bean>
            </list>
        </property>
        <property name="defaultContentType" ref="htmlMediaType" />
        <property name="ignoreAcceptHeader" value="true" />
    </bean>

    <!-- Specify the default media type (html) as we have disabled the
      -  default setting with DefaultAnnotationHandlerMapping -->
    <bean id="htmlMediaType" class="org.springframework.http.MediaType">
        <constructor-arg index="0" value="text" />
        <constructor-arg index="1" value="html" />
    </bean>

    <!-- beans for RestTemplate  -->
    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="messageConverters">
            <list>
                <!-- <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/> -->
                <bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
                <!--<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>-->
                <bean class="org.ala.hubs.util.CustomMappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <!-- Force Jackson to omit properties that are null (smaller json files) -->
    <bean id="jacksonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
    <bean id="jacksonSerializationConfig" class="org.codehaus.jackson.map.SerializationConfig"
          factory-bean="jacksonObjectMapper" factory-method="getSerializationConfig" />
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="jacksonSerializationConfig" />
        <property name="targetMethod" value="setSerializationInclusion" />
        <property name="arguments">
            <list>
                <value type="org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion">NON_NULL</value>
            </list>
        </property>
    </bean>

    <!-- ALA RestfulClient (from ala-logger) -->
    <bean id="restfulClient" class="org.ala.client.util.RestfulClient"/>

    <!-- CollectionCache from biocache-service -->
    <bean id="collectionCache" class="org.ala.biocache.util.CollectionsCache"/>

    <!-- Ecache settings @see http://blog.goyello.com/2010/07/29/quick-start-with-ehcache-annotations-for-spring/ -->
    <ehcache:annotation-driven />

    <ehcache:config cache-manager="cacheManager">
        <!-- interval is in minutes -->
        <ehcache:evict-expired-elements interval="60" />
    </ehcache:config>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation"  value="/WEB-INF/ehcache.xml"/>
    </bean>

    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>

    <!-- Base Jawr config -->
    <bean abstract="true" id="jawrBase"  class="net.jawr.web.servlet.JawrSpringController" >
        <!-- This must match the servlet-mapping to which the spring servlet is bound -->
        <!--<property name="mapping" value="/"/>-->
        <property name="controllerMapping" value="/jawr/"/>
        <property name="configLocation" value="/jawr.properties" />
        <property name="configuration">
            <props>
                <prop key="jawr.debug.on">false</prop>
            </props>
        </property>
    </bean>
    <!-- CSS controller -->
    <bean id="jawrCSSController"  parent="jawrBase">
        <property name="type" value="css" />
    </bean>

    <!-- JS controller -->
    <bean id="jawrJsController" parent="jawrBase">
    </bean>

    <bean id="urlMapping"
          class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <props>
                <prop key="/jawr/**/*.js">jawrJsController</prop>
                <prop key="/jawr/**/*.css">jawrCSSController</prop>
                <!--<prop key="/**/*.jpg">jawrCSSController</prop>-->
                <!--<prop key="/**/*.png">jawrCSSController</prop>-->
            </props>
        </property>
    </bean>
</beans>